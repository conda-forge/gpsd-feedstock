--- a/SConscript	2021-01-09 12:35:30.000000000 +1000
+++ b/SConscript	2021-08-02 06:40:00.535074593 +1000
@@ -660,7 +660,11 @@
           "SHLINKFLAGS",
           ]:
     if i in os.environ:
-        env.MergeFlags(Split(os.getenv(i)))
+        if i == 'CPPFLAGS' or i == 'CFLAGS' or i == 'CXXFLAGS':
+            p = env.ParseFlags(os.getenv(i))
+            env.MergeFlags(p)
+        else:
+            env.MergeFlags(Split(os.getenv(i)))
 
 
 # Keep scan-build options in the environment
@@ -922,7 +922,6 @@ if not cleaning and not helping:
     if (sys.platform != config.env['target_platform']):
         announce("Target system is: %s" % config.env['target_platform'])
 
-    announce("cc is %s, version %s" % (env['CC'], env['CCVERSION']))
     # clang accepts -pthread, then warns it is unused.
     if not config.CheckCC():
         announce("ERROR: CC doesn't work")
@@ -1155,6 +1159,7 @@
             confdefs.append("#define HAVE_LIBUSB 1\n")
             try:
                 usbflags = pkg_config('libusb-1.0')
+                usbflags.append(["-ludev"])
             except OSError:
                 announce("pkg_config is confused about the state "
                          "of libusb-1.0.")
@@ -1426,7 +1426,7 @@
 
 target_python_path = ''
 py_config_text = str(eval(PYTHON_CONFIG_CALL))
-python_libdir = str(eval(PYTHON_LIBDIR_CALL))
+python_libdir = os.environ.get('SP_DIR')
 
 # flag if we have xgps* dependencies, so xgps* should run OK
 config.env['xgps_deps'] = False
@@ -2526,6 +2531,7 @@
      not env['nostrip'] and not sys.platform.startswith('darwin'))):
     env.AddPostAction(binaryinstall, '$STRIP $TARGET')
 
+python_libdir = os.environ.get('SP_DIR')
 python_module_dir = str(python_libdir) + os.sep + 'gps'
 
 python_modules_install = env.Install(DESTDIR + python_module_dir,
diff --git a/clients/ppscheck.c b/clients/ppscheck.c
index b1f7f54c5..8205ed73d 100644
--- a/clients/ppscheck.c
+++ b/clients/ppscheck.c
@@ -600,7 +600,7 @@ int main(int argc, char *argv[])
          * if (0 == ioctl(device_fd, TIOCGETD, &ldisc)) {
          * always returns ldisc == 0 */
         // set PPS line discipline
-        ldisc = N_PPS;    // 18 - the PPS line discipline
+        ldisc = 18;    // 18 - the PPS line discipline
         if (0 > ioctl(device_fd, TIOCSETD, &ldisc)) {
             (void)printf("ERROR: ioctl(%s, TIOCSETD, 18) failed: %.80s(%d)\n",
                          argv[1], strerror(errno), errno);
